#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_MONITORES 100
#define MIN_DEGREE 2 // Grau mínimo da árvore-B

typedef struct Monitor
{
    int codigo;          // Chave primária
    char nome[100];      // Nome do monitor
    char disciplina[50]; // Disciplina que monitora
} Monitor;

typedef struct BTreeNode
{
    int n;                                  // Número de chaves no nó
    Monitor *monitores[2 * MIN_DEGREE - 1]; // Array de ponteiros para os monitores
    struct BTreeNode **filhos;              // Array de ponteiros para filhos
    int folha;                              // Verdadeiro se o nó é folha
} BTreeNode;

typedef struct BTree
{
    BTreeNode *raiz; // Raiz da árvore
} BTree;

// Função para criar um novo nó da árvore-B
BTreeNode *criarNo(int folha)
{
    BTreeNode *novoNo = (BTreeNode *)malloc(sizeof(BTreeNode));
    novoNo->n = 0;
    novoNo->folha = folha;
    novoNo->filhos = (BTreeNode **)malloc(sizeof(BTreeNode *) * (2 * MIN_DEGREE));
    return novoNo;
}

// Função para inicializar a árvore-B
BTree *criarArvoreB()
{
    BTree *novaArvore = (BTree *)malloc(sizeof(BTree));
    novaArvore->raiz = criarNo(1); // Cria a raiz como um nó folha
    return novaArvore;
}

// Função para dividir um nó da árvore-B
void dividirNo(BTreeNode *pai, int indice, BTreeNode *noCheio)
{
    BTreeNode *novoNo = criarNo(noCheio->folha);
    novoNo->n = MIN_DEGREE - 1;

    // Transferir as últimas MIN_DEGREE-1 chaves e filhos para o novo nó
    for (int i = 0; i < MIN_DEGREE - 1; i++)
    {
        novoNo->monitores[i] = noCheio->monitores[i + MIN_DEGREE];
    }
    if (!noCheio->folha)
    {
        for (int i = 0; i < MIN_DEGREE; i++)
        {
            novoNo->filhos[i] = noCheio->filhos[i + MIN_DEGREE];
        }
    }

    noCheio->n = MIN_DEGREE - 1; // Reduz o número de chaves no nó cheio

    // Inserir a nova chave no pai
    for (int i = pai->n; i >= indice + 1; i--)
    {
        pai->filhos[i + 1] = pai->filhos[i];
    }
    pai->filhos[indice + 1] = novoNo; // Adiciona novo nó como filho do pai

    for (int i = pai->n - 1; i >= indice; i--)
    {
        pai->monitores[i + 1] = pai->monitores[i];
    }
    pai->monitores[indice] = noCheio->monitores[MIN_DEGREE - 1]; // Move a chave mediana para o pai
    pai->n++;                                                    // Aumenta o número de chaves no pai
}

// Função para inserir um monitor na árvore-B
void inserirNo(BTreeNode *no, Monitor monitor)
{
    int i = no->n - 1;

    if (no->folha)
    { // Se o nó é folha
        while (i >= 0 && monitor.codigo < no->monitores[i]->codigo)
        {
            no->monitores[i + 1] = no->monitores[i]; // Move as chaves para a direita
            i--;
        }
        no->monitores[i + 1] = (Monitor *)malloc(sizeof(Monitor)); // Aloca espaço para o novo monitor
        *(no->monitores[i + 1]) = monitor;                         // Insere o monitor
        no->n++;                                                   // Aumenta o número de chaves no nó
    }
    else
    { // Se não é folha
        while (i >= 0 && monitor.codigo < no->monitores[i]->codigo)
        {
            i--;
        }
        i++; // Encontra o filho adequado

        if (no->filhos[i]->n == (2 * MIN_DEGREE - 1))
        {                                    // Se o filho está cheio
            dividirNo(no, i, no->filhos[i]); // Divide o filho
            if (monitor.codigo > no->monitores[i]->codigo)
            {
                i++; // Ajusta o índice se necessário
            }
        }
        inserirNo(no->filhos[i], monitor); // Insere recursivamente
    }
}

// Função para inserir um novo monitor na árvore-B
void inserirMonitor(BTree *arvore, Monitor monitor)
{
    BTreeNode *raiz = arvore->raiz;
    if (raiz->n == (2 * MIN_DEGREE - 1))
    { // Se a raiz estiver cheia
        BTreeNode *novoNo = criarNo(0);
        novoNo->filhos[0] = raiz;   // A antiga raiz se torna filho do novo nó
        dividirNo(novoNo, 0, raiz); // Divide a raiz
        arvore->raiz = novoNo;      // Atualiza a raiz
        inserirNo(novoNo, monitor); // Insere o novo monitor
    }
    else
    {
        inserirNo(raiz, monitor); // Insere diretamente na raiz
    }
}

// Função para buscar um monitor pelo código
Monitor *buscarMonitor(BTreeNode *no, int codigo)
{
    int i = 0;
    while (i < no->n && codigo > no->monitores[i]->codigo)
    {
        i++;
    }
    if (i < no->n && codigo == no->monitores[i]->codigo)
    {
        return no->monitores[i]; // Monitor encontrado
    }
    if (no->folha)
    {
        return NULL; // Se o nó é folha e o monitor não foi encontrado
    }
    return buscarMonitor(no->filhos[i], codigo); // Busca recursiva no filho
}

// Função para imprimir todos os monitores cadastrados em ordem
void imprimirMonitores(BTreeNode *no)
{
    if (no != NULL)
    {
        int i;
        // Imprime as chaves dos filhos à esquerda
        for (i = 0; i < no->n; i++)
        {
            if (!no->folha)
            {
                imprimirMonitores(no->filhos[i]);
            }
            // Imprime a chave atual
            printf("RA: %d\nNome: %s - Disciplina: %s\n\n", no->monitores[i]->codigo, no->monitores[i]->nome, no->monitores[i]->disciplina);
        }
        // Imprime o último filho se não for uma folha
        if (!no->folha)
        {
            imprimirMonitores(no->filhos[i]);
        }
    }
}

// Função para modificar um monitor
void modificarMonitor(BTree *arvore, int codigo, Monitor novoMonitor)
{
    Monitor *monitor = buscarMonitor(arvore->raiz, codigo);
    if (monitor != NULL)
    {
        strcpy(monitor->nome, novoMonitor.nome);
        strcpy(monitor->disciplina, novoMonitor.disciplina);
        printf("Monitor modificado com sucesso!\n");
    }
    else
    {
        printf("Monitor não encontrado!\n");
    }
}

Monitor *encontrarPredecessor(BTreeNode *no)
{
    BTreeNode *atual = no;
    while (!atual->folha)
    {
        atual = atual->filhos[atual->n];
    }
    return atual->monitores[atual->n - 1];
}

// Função para ajustar o nó se o número de chaves for menor que o mínimo
void ajustarNo(BTreeNode *pai, int indice, BTreeNode *no)
{
    if (no->n >= MIN_DEGREE)
    {
        return; // O nó ainda tem o número mínimo de chaves
    }

    // Verificar se o nó pode pegar uma chave do irmão à esquerda
    if (indice > 0 && pai->filhos[indice - 1]->n > MIN_DEGREE)
    {
        BTreeNode *irmaoEsquerda = pai->filhos[indice - 1];
        // Mover uma chave do pai para o nó e uma chave do irmão para o pai
        for (int i = no->n; i > 0; i--)
        {
            no->monitores[i] = no->monitores[i - 1];
        }
        if (!no->folha)
        {
            for (int i = no->n + 1; i > 0; i--)
            {
                no->filhos[i] = no->filhos[i - 1];
            }
        }
        no->monitores[0] = pai->monitores[indice - 1];
        if (!no->folha)
        {
            no->filhos[0] = irmaoEsquerda->filhos[irmaoEsquerda->n];
        }
        pai->monitores[indice - 1] = irmaoEsquerda->monitores[irmaoEsquerda->n - 1];
        irmaoEsquerda->n--;
        no->n++;
        return;
    }

    // Verificar se o nó pode pegar uma chave do irmão à direita
    if (indice < pai->n && pai->filhos[indice + 1]->n > MIN_DEGREE)
    {
        BTreeNode *irmaoDireita = pai->filhos[indice + 1];
        // Mover uma chave do irmão para o nó e uma chave do pai para o irmão
        no->monitores[no->n] = pai->monitores[indice];
        if (!no->folha)
        {
            no->filhos[no->n + 1] = irmaoDireita->filhos[0];
        }
        pai->monitores[indice] = irmaoDireita->monitores[0];
        for (int i = 0; i < irmaoDireita->n - 1; i++)
        {
            irmaoDireita->monitores[i] = irmaoDireita->monitores[i + 1];
        }
        if (!irmaoDireita->folha)
        {
            for (int i = 0; i < irmaoDireita->n; i++)
            {
                irmaoDireita->filhos[i] = irmaoDireita->filhos[i + 1];
            }
        }
        irmaoDireita->n--;
        no->n++;
        return;
    }

    // Se não for possível pegar uma chave do irmão, fundir com o irmão à esquerda
    if (indice > 0)
    {
        BTreeNode *irmaoEsquerda = pai->filhos[indice - 1];
        // Mover a chave do pai para o irmão
        irmaoEsquerda->monitores[irmaoEsquerda->n] = pai->monitores[indice - 1];
        if (!irmaoEsquerda->folha)
        {
            irmaoEsquerda->filhos[irmaoEsquerda->n + 1] = no->filhos[0];
        }
        // Mover as chaves do nó para o irmão
        for (int i = 0; i < no->n; i++)
        {
            irmaoEsquerda->monitores[irmaoEsquerda->n + 1 + i] = no->monitores[i];
            if (!irmaoEsquerda->folha)
            {
                irmaoEsquerda->filhos[irmaoEsquerda->n + 1 + i] = no->filhos[i];
            }
        }
        irmaoEsquerda->n += no->n + 1;
        // Remover o nó e a chave do pai
        for (int i = indice; i < pai->n; i++)
        {
            pai->monitores[i - 1] = pai->monitores[i];
            pai->filhos[i] = pai->filhos[i + 1];
        }
        pai->n--;
        free(no);
        if (pai->n < MIN_DEGREE - 1)
        {
            ajustarNo(pai->filhos[indice - 1], indice - 1, irmaoEsquerda);
        }
        return;
    }

    // Se não for possível pegar uma chave do irmão, fundir com o irmão à direita
    if (indice < pai->n)
    {
        BTreeNode *irmaoDireita = pai->filhos[indice + 1];
        // Mover a chave do pai para o nó
        no->monitores[no->n] = pai->monitores[indice];
        if (!no->folha)
        {
            no->filhos[no->n + 1] = irmaoDireita->filhos[0];
        }
        // Mover as chaves do irmão para o nó
        for (int i = 0; i < irmaoDireita->n; i++)
        {
            no->monitores[no->n + 1 + i] = irmaoDireita->monitores[i];
            if (!no->folha)
            {
                no->filhos[no->n + 1 + i] = irmaoDireita->filhos[i];
            }
        }
        no->n += irmaoDireita->n + 1;
        // Remover o irmão e a chave do pai
        for (int i = indice + 1; i < pai->n; i++)
        {
            pai->monitores[i - 1] = pai->monitores[i];
            pai->filhos[i] = pai->filhos[i + 1];
        }
        pai->n--;
        free(irmaoDireita);
        if (pai->n < MIN_DEGREE - 1)
        {
            ajustarNo(pai, indice, no);
        }
    }
}

// Função para remover um monitor da árvore-B
void removerMonitor(BTree *arvore, int codigo)
{
    BTreeNode *raiz = arvore->raiz;
    removerNo(raiz, codigo);
    if (raiz->n == 0 && raiz->filhos[0] != NULL)
    {
        BTreeNode *novaRaiz = raiz->filhos[0];
        free(raiz);
        arvore->raiz = novaRaiz;
    }
}

// Função auxiliar para remover um nó da árvore-B
void removerNo(BTreeNode *no, int codigo)
{
    int i = 0;
    while (i < no->n && codigo > no->monitores[i]->codigo)
    {
        i++;
    }
    if (i < no->n && codigo == no->monitores[i]->codigo)
    {
        if (no->folha)
        {
            for (int j = i; j < no->n - 1; j++)
            {
                no->monitores[j] = no->monitores[j + 1];
            }
            no->n--;
        }
        else
        {
            Monitor *predecessor = encontrarPredecessor(no->filhos[i]);
            no->monitores[i] = predecessor;
            removerNo(no->filhos[i], predecessor->codigo);
        }
        ajustarNo(no, i, no);
    }
    else if (!no->folha)
    {
        if (no->filhos[i]->n < MIN_DEGREE)
        {
            ajustarNo(no, i, no->filhos[i]);
        }
        removerNo(no->filhos[i], codigo);
    }
}

int main()
{
    BTree *arvore = criarArvoreB();
    int opcao;
    do
    {
        printf("Menu:\n");
        printf("1. Cadastrar Monitor\n");
        printf("2. Buscar Monitor\n");
        printf("3. Modificar Monitor\n");
        printf("4. Imprimir Monitores Cadastrados\n");
        printf("5. Remover monitor\n");
        printf("0. Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);
        Monitor novoMonitor;

        switch (opcao)
        {
        case 1:
            system("cls");
            do
            {
                printf("RA: ");
                while (scanf("%d", &novoMonitor.codigo) != 1)
                { // Verifica se o input é um número inteiro
                    printf("Entrada invalida! Digite um numero inteiro: ");
                    while (getchar() != '\n')
                        ; // Limpa o buffer de entrada
                }

                // Verifica se o código já existe
                if (buscarMonitor(arvore->raiz, novoMonitor.codigo) != NULL)
                {
                    system("cls");
                    printf("RA ja existe! Por favor, insira um codigo diferente: ");
                }
                else
                {
                    break; // Sai do loop se o código for único
                }
            } while (1);

            printf("Nome: ");
            scanf(" %[^\n]", novoMonitor.nome);
            printf("Disciplina: ");
            scanf(" %[^\n]", novoMonitor.disciplina);

            inserirMonitor(arvore, novoMonitor);
            printf("\nMonitor cadastrado com sucesso!\n");
            system("pause");
            system("cls");
            break;

        case 2:
            system("cls");
            int codigoBusca;
            printf("RA do Monitor: ");
            scanf("%d", &codigoBusca);
            Monitor *monitorEncontrado = buscarMonitor(arvore->raiz, codigoBusca);
            if (monitorEncontrado != NULL)
            {
                printf("Monitor encontrado!\n");
                printf("RA: %d\n", monitorEncontrado->codigo);
                printf("Nome: %s\n", monitorEncontrado->nome);
                printf("Disciplina: %s\n\n", monitorEncontrado->disciplina);
            }
            else
            {
                printf("\nMonitor nao encontrado!\n");
            }
            system("pause");
            system("cls");
            break;

        case 3:
            system("cls");
            printf("RA: %d - Nome: %s\n\n", monitorEncontrado->codigo, monitorEncontrado->nome);
            printf("RA do Monitor a ser modificado: ");
            scanf("%d", &novoMonitor.codigo);

            printf("Novo Nome: ");
            scanf(" %[^\n]", novoMonitor.nome);
            printf("Nova Disciplina: ");
            scanf(" %[^\n]", novoMonitor.disciplina);
            modificarMonitor(arvore, novoMonitor.codigo, novoMonitor);
            system("pause");
            system("cls");
            break;
        case 4:
            system("cls");
            printf("Monitores Cadastrados:\n");
            imprimirMonitores(arvore->raiz);
            system("pause");
            system("cls");
            break;
        case 5:
            system("cls");
            printf("RA: %d - Nome: %s\n\n", monitorEncontrado->codigo, monitorEncontrado->nome);
            printf("RA do Monitor a ser removido: ");
            scanf("%d", &novoMonitor.codigo);
            removerMonitor(arvore, novoMonitor.codigo);
            printf("Monitor removido com sucesso!\n");
            system("pause");
            system("cls");
            break;
        case 0:
            system("cls");
            printf("Saindo...\n");
            break;
        default:
            system("cls");
            printf("Opcao invalida! Tente novamente.\n");
        }
    } while (opcao != 0);
    free(arvore); // Liberação de memória e saída do programa
    return 0;
}
